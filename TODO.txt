Searching 45 files for "TODO"

F:\Github\spine-d\src\spine\animation\animation.d:
   42      }
   43  
   44:     //TODO: change signeture to use events and last time
   45      void apply(Skeleton skeleton, float time, bool loop) {
   46          mix(skeleton, time, loop, 1);
   47      }
   48  
   49:     //TODO: change signeture to use events and last time
   50      void mix(Skeleton skeleton, float time, bool loop, float alpha) {
   51          mixin(ArgNull!skeleton);
   ..
   81  
   82      override hash_t toHash() {
   83:         return cast(hash_t)_duration; //TODO: use better hash
   84      }
   85  

F:\Github\spine-d\src\spine\animation\state\state.d:
    8  import spine.util.argnull;
    9  
   10: //TODO: needs a lot of changes
   11  export class AnimationState {
   12  
   ..
  153      QueueEntry[] _queue;
  154  
  155:     //TODO: remove this and implement TrackEntry class in trackentry.d
  156      struct QueueEntry {
  157          Animation animation;

F:\Github\spine-d\src\spine\animation\timeline\timeline.d:
    4  
    5  export interface Timeline {
    6:     //TODO: change signeture to use events and last time
    7      void apply(Skeleton skeleton, float time, float alpha);
    8  }

F:\Github\spine-d\src\spine\atlas\atlas.d:
   12  export class Atlas {
   13      
   14:     //TODO: add this(string path, TextureLoader textureLoader)
   15  
   16      this(File reader, string dir, TextureLoader textureLoader) {
   ..
   18      }
   19  
   20:     //TODO: add this(AtlasPage[] pages, AtlasRegion[] regions)
   21  
   22:     //TODO: add unittest
   23      
   24      private void load(File reader, string imagesDir, TextureLoader textureLoader) {
   ..
  128      }
  129  
  130:     //TODO: implement flipV method
  131      
  132      AtlasRegion findRegion(string name) {

F:\Github\spine-d\src\spine\attachment\atlasloader.d:
   19      }
   20  
   21:     //TODO: implement the new AttachmentLoader
   22  
   23      Attachment NewAttachment(Skin skin, AttachmentType type, string name) {

F:\Github\spine-d\src\spine\attachment\loader.d:
    6  
    7  export interface AttachmentLoader {
    8:     //TODO: remove this methid and implement the others
    9      Attachment NewAttachment(Skin skin, AttachmentType type, string name);
   10  
   11:     //TODO: implement newRegionAttachment method
   12:     //TODO: implement newMeshAttachment method
   13:     //TODO: implement newSkinnedMeshAttachment method
   14:     //TODO: implement newBoundingBoxAttachment method
   15  }

F:\Github\spine-d\src\spine\attachment\region.d:
    8      enum { X1, Y1, X2, Y2, X3, Y3, X4, Y4 }
    9  
   10:     //TODO: maybe make these properties
   11      float x;
   12      float y;
   ..
   17      float height;
   18  
   19:     //TODO: add float r, g, b, a props and set them to 1 in the ctor
   20:     //TODO: add string path prop
   21      Object rendererObject;
   22      float regionOffsetX;
   ..
  101      }
  102  
  103:     //TODO: rename to computeWorldVertices; remove x and y params and use bone.skeleton. x and y
  104      void computeVertices(float x, float y, Bone bone, float[] vertices) {
  105          x += bone.worldX;

F:\Github\spine-d\src\spine\bone\bone.d:
   26      }
   27  
   28:     //TODO: Add skeleton prop and field
   29  
   30      @property {
   ..
   37      }
   38  
   39:     //TODO: Add Children array prop and field
   40  
   41      @property {
   ..
   66      }
   67  
   68:     //TODO: Add RotationIK prop and field
   69  
   70      @property {
   ..
  167      }
  168  
  169:     //TODO: remove flip parameters and use skeleton.flip
  170      void updateWorldTransform(bool flipX, bool flipY) {
  171          if(parent !is null) {
  ...
  179                  worldScaleY = scaleY;
  180              }
  181:             //TODO: Use rotationIK here
  182              worldRotation = data.inheritRotation ? parent.worldRotation + rotation : rotation;
  183          } else {
  184              worldX = flipX ? -x : x;
  185:             worldY = flipY ? -y : y; //TODO: flipY != yDown ? -y : y; 
  186              worldScaleX = scaleX;
  187              worldScaleY = scaleY;
  ...
  191          float cos = std.math.cos(radians);
  192          float sin = std.math.sin(radians);
  193:         //TODO: logic has changed from here
  194          m00 = cos * worldScaleX;
  195          m10 = sin * worldScaleX;
  ...
  214      }
  215  
  216:     //TODO: Add worldToLocal method
  217:     //TODO: Add localToWorld method
  218  
  219      override string toString() {

F:\Github\spine-d\src\spine\skeleton\json.d:
    2  
    3  export class SkeletonJson {
    4:     //TODO: implement using std.json;
    5  }

F:\Github\spine-d\src\spine\skin\skin.d:
   13      }
   14  
   15:     //TODO: add unittest
   16  
   17      @property {

F:\Github\spine-d\src\spine\slot\slot.d:
   12  export class Slot {
   13  
   14:     //TODO: remove skeleton from constructor and use bone.skeleton
   15      this(SlotData data, Skeleton skeleton, Bone bone) {
   16          mixin(ArgNull!data);
   ..
   41      }
   42  
   43:     //TODO: remove seter;  return bone.skeleton
   44      @property {
   45          Skeleton skeleton() {
   ..
   98  
   99      @property {
  100:         //TODO: return bone.skeleton.time - _attachmentTime;
  101          float attachmentTime() {
  102              return _attachmentTime;
  ...
  107      }
  108  
  109:     //TODO: add attachment vertices prop and field
  110:     //TODO: add attachment verticies count prop and field
  111  
  112      void setToSetupPose(int slotIndex) {

F:\Github\spine-d\src\spine\util\property.d:
   29          static if(cases.length > 0)
   30          {
   31:             //TODO: make cases more advanced
   32              //snake_case
   33              //camelCase

37 matches across 12 files
